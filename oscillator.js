// Generated by CoffeeScript 1.10.0
(function() {
  var Oscillator, _, cosTable, pi2, sinTable, tableLength,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  _ = require('underscore-node');

  pi2 = Math.PI * 2;

  tableLength = 1024;

  sinTable = _.times(tableLength, function(i) {
    return Math.sin((pi2 * i) / tableLength);
  });

  cosTable = _.times(tableLength, function(i) {
    return Math.cos((pi2 * i) / tableLength);
  });

  module.exports = Oscillator = (function() {
    function Oscillator(func, freq) {
      if (freq == null) {
        freq = 0;
      }
      this.valueAt = bind(this.valueAt, this);
      this.setFunction = bind(this.setFunction, this);
      this.freq = freq;
      this.phase = 0;
      this.setFunction(func);
      this;
    }

    Oscillator.prototype.setFunction = function(func) {
      this.func = (function() {
        switch (func) {
          case 'sin':
          case 'sine':
            return this.sine;
          case 'cos':
          case 'cosine':
            return this.cosine;
          case 'sq':
          case 'square':
            return this.square;
          case 'tri':
          case 'triangle':
            return this.triangle;
          case 'saw':
          case 'sawtooth':
            return this.sawtooth;
          default:
            if (_.isFunction(func)) {
              return func;
            } else if (_.isFunction(func.valueAt)) {
              return func.valueAt;
            } else {
              console.log('Cannot set oscillator function to passed object', func);
              return null;
            }
        }
      }).call(this);
      return this;
    };

    Oscillator.prototype.valueAt = function(time) {
      var f, i, val;
      f = this.freq.valueAt(time);
      i = this.phase;
      this.phase = (this.phase + (f / SampleRate)) % 1.0;
      val = this.func(i);
      return val;
    };

    Oscillator.prototype.sine = function(phase) {
      return sinTable[Math.floor(phase * tableLength)];
    };

    Oscillator.prototype.cosine = function(phase) {
      return cosTable[Math.floor(phase * tableLength)];
    };

    Oscillator.prototype.square = function(phase) {
      if (phase <= 0.5) {
        return 1;
      } else {
        return -1;
      }
    };

    Oscillator.prototype.triangle = function(phase) {
      if (phase <= 0.25) {
        return phase * 4;
      } else if (phase <= 0.50) {
        return 1 - (phase - 0.25) * 4;
      } else if (phase <= 0.75) {
        return 0 - (phase - 0.5) * 4;
      } else {
        return (phase - 0.75) * 4 - 1;
      }
    };

    Oscillator.prototype.sawtooth = function(phase) {
      return phase * 2 - 1;
    };

    return Oscillator;

  })();

}).call(this);

//# sourceMappingURL=oscillator.js.map
